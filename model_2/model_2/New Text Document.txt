/*
void processBlock()
{
	DSPfract ph;
	DSPint index;

	// Make a temporary copy of any state variables which need to be
	// maintained between calls to processBlock(). Each channel needs to be processed identically
	// which means that the activity of processing one channel can't affect the state variable for
	// the next channel.
	ph = tremolo.lfoPhase;
//	index = tremolo.index;
	for (DSPint i = 0; i < BLOCK_SIZE; ++i)
	{
		const DSPfract in = input[i];

		// Ring modulation is easy! Just multiply the waveform by a periodic carrier
		output[i] = (FRACT_NUM(1.0f) - tremolo.depth * gen_sine_wave(ph)) * in;
//		*output = gen_sine_wave(ph);
//		if (index > MAX_LOOK_UP_INDEX)
//			index = MAX_LOOK_UP_INDEX;

//		*output = *input * (FRACT_NUM(1.0) - FRACT_NUM(tremolo.depth) * sine_table_ptr[index]);
//		output[i] = FRACT_NUM(sine_table[index]);
		// Update the carrier and LFO phases, keeping them in the range 0-1
		tremolo.LFO_frequency = tremolo.LFO_frequency + tremolo.LFO_frequency;
		ph = ph + tremolo.LFO_frequency * tremolo.inverseSampleRate;
		if (ph >= FRACT_NUM(1.0))
			ph = ph - FRACT_NUM(1.0);
//		input++;
//		output++;
//		index++;
	}

	// Having made a local copy of the state variables for each channel, now transfer the result
	// back to the main state variable so they will be preserved for the next call of processBlock()
	tremolo.lfoPhase = ph;
//	tremolo.index = index;
}
*/